// const Tour = require('./../models/tourModel');

// exports.aliasTopTour = (req, res, next) => {
//   req.query.limit = '5';
//   req.query.sort = '-ratigsAverage,price';
//   req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
//   next();
// };

// class APIFeatures {
//   constructor(query, queryString) {
//     this.query = query;
//     this.queryString = queryString;
//   }
//   filter() {
//     const qureyObj = { ...this.queryString };
//     //this line of code tell us which we have to delete from the site..
//     const excludeFields = ['page', 'sort', 'limit', 'fields'];

//     //loopiing forEach element in queryObj to delte it from the site....
//     excludeFields.forEach((el) => delete qureyObj[el]);

//     let queryStr = JSON.stringify(qureyObj);
//     queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
//     console.log(JSON.parse(queryStr));

//     //For greating or equal to...
//     //{duration: 5, difficulty: { $gte: 5}}
//     //{ duration: { gte: '6' }, difficulty: '5' }

//     // const query = Tour.find(qureyObj);
//     // let query = Tour.find(JSON.parse(queryStr));

//     this.query = this.query.find(JSON.parse(queryStr));

//     return this;
//   }
//   //req.query is replace by this.queryString..
//   //query is replace by this.query..
//   sort() {
//     if (this.queryString.sort) {
//       const sortBy = this.queryString.sort.split(',').join('');
//       console.log(sortBy);
//       // query = query.sort(req.query.sort);
//       this.query = this.query.sort(sortBy);
//     } else {
//       //if not sort is added then we must sort it by the time it is created at...
//       this.query = this.query.sort('-createdAt');
//     }

//     return this;
//   }

//   limitFields() {
//     if (this.queryString.fields) {
//       const fields = this.queryString.fields.split(',').join(' ');
//       this.query = this.query.select(fields);
//     } else {
//       this.query = this.query.select('-__v');
//     }

//     return this;
//   }

//   paginate() {
//     const page = this.queryString.page * 1 || 1; // || is used to defining the default values...
//     const limit = this.queryString.limit * 1 || 100;
//     console.log(page);

//     //so here basically what we are doing is seeing that skip
//     //contain the page - 1 * limit value in which limit is by default set to 10..
//     const skip = (page - 1) * limit;
//     //page=2&limit=10
//     this.query = this.query.skip(skip).limit(limit);

//     return this;
//   }
// }

// exports.getAllTours = async (req, res) => {
//   try {
//     //==> BUILD A QUERY..
//     //1)Filtering
//     //this line of code get all the queries from the site..
//     // const qureyObj = { ...req.query };
//     // //this line of code tell us which we have to delete from the site..
//     // const excludeFields = ['page', 'sort', 'limit', 'fields'];

//     // //loopiing forEach element in queryObj to delte it from the site....
//     // excludeFields.forEach((el) => delete qureyObj[el]);

//     // console.log(req.query);

//     //==> simple method for filtering data using tradition mongoDb command for  creating queries..
//     // const tours = await Tour.find({
//     //   duration: 5,
//     //   difficulty: 'easy',
//     // });

//     //==> EXECUTE QUERY..

//     // console.log(req.query);

//     // //==> ADVANCED FILTERING...
//     // //sorting the queryObj according to less than and greater than..
//     // let queryStr = JSON.stringify(qureyObj);
//     // queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
//     // console.log(JSON.parse(queryStr));

//     // //For greating or equal to...
//     // //{duration: 5, difficulty: { $gte: 5}}
//     // //{ duration: { gte: '6' }, difficulty: '5' }

//     // // const query = Tour.find(qureyObj);
//     // let query = Tour.find(JSON.parse(queryStr));

//     //2)Sorting...
//     // if (req.query.sort) {
//     //   const sortBy = req.query.sort.split(',').join('');
//     //   console.log(sortBy);
//     //   // query = query.sort(req.query.sort);
//     //   query = query.sort(sortBy);
//     // } else {
//     //   //if not sort is added then we must sort it by the time it is created at...
//     //   query = query.sort('-createdAt');
//     // }

//     //3)Field limiting...
//     // if (req.query.fields) {
//     //   const fields = req.query.fields.split(',').join(' ');
//     //   query = query.select(fields);
//     // } else {
//     //   query = query.select('-__v');
//     // }

//     //4)Pagination...
//     // const page = req.query.page * 1 || 1; // || is used to defining the default values...
//     // const limit = req.query.limit * 1 || 100;
//     // console.log(page);

//     // //so here basically what we are doing is seeing that skip
//     // //contain the page - 1 * limit value in which limit is by default set to 10..
//     // const skip = (page - 1) * limit;
//     // //page=2&limit=10
//     // query = query.skip(skip).limit(limit);

//     // if (req.query.page) {
//     //   //used to counting the number of documents in the page...
//     //   const numTours = await Tour.countDocuments();
//     //   //if the skip is more than we must throw an error..
//     //   if (skip >= numTours) throw new Error('This page does not exits');
//     // }

//     //Excecute query...
//     const feautres = new APIFeatures(Tour.find(), req.query)
//       .filter()
//       .sort()
//       .limitFields()
//       .paginate();

//     const tours = await feautres.query;

//     //using mongoose method..
//     // const tours = await Tour.find()
//     //   .where('duration')
//     //   .equals(5)
//     //   .where('difficulty')
//     //   .equals('easy');
//     res.status(200).json({
//       status: 'success',
//       results: tours.length,
//       data: {
//         tours,
//       },
//     });
//   } catch (err) {
//     res.status(404).json({
//       status: 'fail',
//       message: err,
//     });
//   }
// };

// //finding single tour we can use findById

// exports.getTour = async (req, res) => {
//   try {
//     const tour = await Tour.findById(req.params.id);
//     //Tour.findOne({ _id: req.params.id})
//     res.status(200).json({
//       status: 'success',
//       results: tour.length,
//       data: {
//         tour,
//       },
//     });
//   } catch (err) {
//     res.status(404).json({
//       status: 'fail',
//       message: err,
//     });
//   }
// };

// //.create method to create new tours..

// exports.createTour = async (req, res) => {
//   try {
//     const newTour = await Tour.create(req.body);
//     res.status(201).json({
//       status: 'success',
//       data: {
//         tour: newTour,
//       },
//     });
//   } catch (err) {
//     res.status(400).json({
//       status: 'fail',
//       message: 'Inavlid data sent...',
//     });
//   }
// };

// //findByIdAndUpdate to get by id and update... we pass, req.paramas.id, req.body,{new: true,}...
// //runValidators are used to validate the data..

// exports.updateTour = async (req, res) => {
//   try {
//     const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
//       new: true,
//       runValidators: true,
//     });
//     res.status(200).json({
//       status: 'success',
//       data: {
//         tour,
//       },
//     });
//   } catch (err) {
//     res.status(400).json({
//       status: 'fail',
//       message: err,
//     });
//   }
// };

// exports.deleteTour = async (req, res) => {
//   try {
//     await Tour.findByIdAndDelete(req.params.id, req.body);
//     res.status(204).json({
//       status: 'success',
//       data: null,
//     });
//   } catch (err) {
//     res.status(400).json({
//       status: 'fail',
//       message: err,
//     });
//   }
// };
